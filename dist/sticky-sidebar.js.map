{"version":3,"names":[],"mappings":"","sources":["sticky-sidebar.js"],"sourcesContent":["(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define(['exports'], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(exports);\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod.exports);\n    global.stickySidebar = mod.exports;\n  }\n})(this, function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  var _createClass = function () {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n\n  /**\n   * Sticky Sidebar v2 JavaScript Plugin.\n   * @version 1.0.1\n   * @author Ã˜ystein Blixhavn <oystein@blixhavn.no>\n   * @license The MIT License (MIT)\n   */\n  var StickySidebar = function () {\n\n    // ---------------------------------\n    // # Define Constants\n    // ---------------------------------\n    //\n    var EVENT_KEY = '.stickySidebar';\n    var VERSION = '1.0.1';\n\n    var DEFAULTS = {\n      /**\n       * Additional top spacing of the element when it becomes sticky.\n       * @type {Numeric|Function}\n       */\n      topSpacing: 0,\n\n      /**\n       * Additional bottom spacing of the element when it becomes sticky.\n       * @type {Numeric|Function}\n       */\n      bottomSpacing: 0,\n\n      /**\n       * Container sidebar selector to know what the beginning and end of sticky element.\n       * @type {String|False}\n       */\n      containerSelector: false,\n\n      /**\n       * Parent element where the scrolling happens.\n       */\n      scrollContainer: false,\n\n      /**\n       * Inner wrapper selector.\n       * @type {String}\n       */\n      innerWrapperSelector: '.inner-wrapper-sticky',\n\n      /**\n       * The name of CSS class to apply to elements when they have become stuck.\n       * @type {String|False}\n       */\n      stickyClass: 'is-affixed',\n\n      /**\n       * The sidebar returns to its normal position if its width below this value.\n       * @type {Numeric}\n       */\n      minWidth: false\n    };\n\n    // ---------------------------------\n    // # Class Definition\n    // ---------------------------------\n    //\n    /**\n     * Sticky Sidebar Class.\n     * @public\n     */\n\n    var StickySidebar = function () {\n\n      /**\n       * Sticky Sidebar Constructor.\n       * @constructor\n       * @param {HTMLElement|String} sidebar - The sidebar element or sidebar selector.\n       * @param {Object} options - The options of sticky sidebar.\n       */\n      function StickySidebar(sidebar) {\n        var _this = this;\n\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        _classCallCheck(this, StickySidebar);\n\n        this.options = StickySidebar.extend(DEFAULTS, options);\n\n        // Sidebar element query if there's no one, throw error.\n        this.sidebar = 'string' === typeof sidebar ? document.querySelector(sidebar) : sidebar;\n        if ('undefined' === typeof this.sidebar) throw new Error(\"There is no specific sidebar element.\");\n\n        this.sidebarInner = false;\n        this.container = this.sidebar.parentElement;\n\n        // Current Affix Type of sidebar element.\n        this.affixedType = 'STATIC';\n        this.direction = 'down';\n        this.support = {\n          transform: false,\n          transform3d: false\n        };\n\n        this._initialized = false;\n        this._reStyle = false;\n        this._breakpoint = false;\n\n        // Dimensions of sidebar, container and screen viewport.\n        this.dimensions = {\n          translateY: 0,\n          maxTranslateY: 0,\n          topSpacing: 0,\n          lastTopSpacing: 0,\n          bottomSpacing: 0,\n          lastBottomSpacing: 0,\n          sidebarHeight: 0,\n          sidebarWidth: 0,\n          containerTop: 0,\n          containerHeight: 0,\n          viewportHeight: 0,\n          viewportTop: 0,\n          lastViewportTop: 0\n        };\n\n        // Bind event handlers for referencability.\n        ['handleEvent'].forEach(function (method) {\n          _this[method] = _this[method].bind(_this);\n        });\n\n        // Initialize sticky sidebar for first time.\n        this.initialize();\n      }\n\n      /**\n       * Initializes the sticky sidebar by adding inner wrapper, define its container,\n       * min-width breakpoint, calculating dimensions, adding helper classes and inline style.\n       * @private\n       */\n\n\n      _createClass(StickySidebar, [{\n        key: 'initialize',\n        value: function initialize() {\n          var _this2 = this;\n\n          this._setSupportFeatures();\n\n          // Get sticky sidebar inner wrapper, if not found, will create one.\n          if (this.options.innerWrapperSelector) {\n            this.sidebarInner = this.sidebar.querySelector(this.options.innerWrapperSelector);\n\n            if (null === this.sidebarInner) this.sidebarInner = false;\n          }\n\n          if (!this.sidebarInner) {\n            var wrapper = document.createElement('div');\n            wrapper.setAttribute('class', 'inner-wrapper-sticky');\n            this.sidebar.appendChild(wrapper);\n\n            while (this.sidebar.firstChild != wrapper) {\n              wrapper.appendChild(this.sidebar.firstChild);\n            }this.sidebarInner = this.sidebar.querySelector('.inner-wrapper-sticky');\n          }\n\n          // Container wrapper of the sidebar.\n          if (this.options.containerSelector) {\n            var containers = document.querySelectorAll(this.options.containerSelector);\n            containers = Array.prototype.slice.call(containers);\n\n            containers.forEach(function (container, item) {\n              if (!container.contains(_this2.sidebar)) return;\n              _this2.container = container;\n            });\n\n            if (!containers.length) throw new Error(\"The container does not contains on the sidebar.\");\n          }\n\n          // Get scroll container, if provided\n          this.scrollContainer = this.options.scrollContainer ? document.querySelector(this.options.scrollContainer) : undefined;\n\n          // If top/bottom spacing is not function parse value to integer.\n          if ('function' !== typeof this.options.topSpacing) this.options.topSpacing = parseInt(this.options.topSpacing) || 0;\n\n          if ('function' !== typeof this.options.bottomSpacing) this.options.bottomSpacing = parseInt(this.options.bottomSpacing) || 0;\n\n          // Breakdown sticky sidebar if screen width below `options.minWidth`.\n          this._widthBreakpoint();\n\n          // Calculate dimensions of sidebar, container and viewport.\n          this.calcDimensions();\n\n          // Affix sidebar in proper position.\n          this.stickyPosition();\n\n          // Bind all events.\n          this.bindEvents();\n\n          // Inform other properties the sticky sidebar is initialized.\n          this._initialized = true;\n        }\n      }, {\n        key: 'bindEvents',\n        value: function bindEvents() {\n          var _this3 = this;\n\n          this.eventTarget = this.scrollContainer ? this.scrollContainer : window;\n\n          this.eventTarget.addEventListener('resize', this, { passive: true, capture: false });\n          this.eventTarget.addEventListener('scroll', this, { passive: true, capture: false });\n\n          this.sidebar.addEventListener('update' + EVENT_KEY, this);\n\n          if ('undefined' !== typeof ResizeObserver) {\n            var resizeObserver = new ResizeObserver(function () {\n              return _this3.handleEvent();\n            });\n            resizeObserver.observe(this.sidebarInner);\n            resizeObserver.observe(this.container);\n          }\n        }\n      }, {\n        key: 'handleEvent',\n        value: function handleEvent(event) {\n          this.updateSticky(event);\n        }\n      }, {\n        key: 'calcDimensions',\n        value: function calcDimensions() {\n          if (this._breakpoint) return;\n          var dims = this.dimensions;\n\n          // Container of sticky sidebar dimensions.\n          dims.containerTop = StickySidebar.offsetRelative(this.container).top;\n          dims.containerHeight = this.container.clientHeight;\n          dims.containerBottom = dims.containerTop + dims.containerHeight;\n\n          // Sidebar dimensions.\n          dims.sidebarHeight = this.sidebarInner.offsetHeight;\n          dims.sidebarWidth = this.sidebarInner.offsetWidth;\n\n          // Screen viewport dimensions.\n          dims.viewportHeight = window.innerHeight;\n\n          // Maximum sidebar translate Y.\n          dims.maxTranslateY = dims.containerHeight - dims.sidebarHeight;\n\n          this._calcDimensionsWithScroll();\n        }\n      }, {\n        key: '_calcDimensionsWithScroll',\n        value: function _calcDimensionsWithScroll() {\n          var dims = this.dimensions;\n\n          dims.sidebarLeft = StickySidebar.offsetRelative(this.sidebar).left;\n\n          if (this.scrollContainer) {\n            dims.viewportTop = this.scrollContainer.scrollTop;\n            dims.viewportLeft = this.scrollContainer.scrollLeft;\n          } else {\n            dims.viewportTop = document.documentElement.scrollTop || document.body.scrollTop;\n            dims.viewportLeft = document.documentElement.scrollLeft || document.body.scrollLeft;\n          }\n          dims.viewportBottom = dims.viewportTop + dims.viewportHeight;\n\n          dims.topSpacing = this.options.topSpacing;\n          dims.bottomSpacing = this.options.bottomSpacing;\n\n          if ('function' === typeof dims.topSpacing) dims.topSpacing = parseInt(dims.topSpacing(this.sidebar)) || 0;\n\n          if ('function' === typeof dims.bottomSpacing) dims.bottomSpacing = parseInt(dims.bottomSpacing(this.sidebar)) || 0;\n\n          if ('VIEWPORT-TOP' === this.affixedType) {\n            // Adjust translate Y in the case decrease top spacing value.\n            if (dims.topSpacing < dims.lastTopSpacing) {\n              dims.translateY += dims.lastTopSpacing - dims.topSpacing;\n              this._reStyle = true;\n            }\n          } else if ('VIEWPORT-BOTTOM' === this.affixedType) {\n            // Adjust translate Y in the case decrease bottom spacing value.\n            if (dims.bottomSpacing < dims.lastBottomSpacing) {\n              dims.translateY += dims.lastBottomSpacing - dims.bottomSpacing;\n              this._reStyle = true;\n            }\n          }\n\n          dims.lastTopSpacing = dims.topSpacing;\n          dims.lastBottomSpacing = dims.bottomSpacing;\n        }\n      }, {\n        key: 'isSidebarFitsViewport',\n        value: function isSidebarFitsViewport() {\n          return this.dimensions.viewportHeight >= this.dimensions.lastBottomSpacing + this.dimensions.lastTopSpacing + this.dimensions.sidebarHeight;\n        }\n      }, {\n        key: 'observeScrollDir',\n        value: function observeScrollDir() {\n          var dims = this.dimensions;\n          if (dims.lastViewportTop === dims.viewportTop) return;\n\n          var furthest = 'down' === this.direction ? Math.min : Math.max;\n\n          // If the browser is scrolling not in the same direction.\n          if (dims.viewportTop === furthest(dims.viewportTop, dims.lastViewportTop)) this.direction = 'down' === this.direction ? 'up' : 'down';\n        }\n      }, {\n        key: 'getAffixType',\n        value: function getAffixType() {\n          this._calcDimensionsWithScroll();\n          var dims = this.dimensions;\n          var colliderTop = dims.viewportTop + dims.topSpacing;\n          var affixType = this.affixedType;\n\n          if (colliderTop <= dims.containerTop || dims.containerHeight <= dims.sidebarHeight) {\n            dims.translateY = 0;\n            affixType = 'STATIC';\n          } else {\n            affixType = 'up' === this.direction ? this._getAffixTypeScrollingUp() : this._getAffixTypeScrollingDown();\n          }\n\n          // Make sure the translate Y is not bigger than container height.\n          dims.translateY = Math.max(0, dims.translateY);\n          dims.translateY = Math.min(dims.containerHeight, dims.translateY);\n          dims.translateY = Math.round(dims.translateY);\n\n          dims.lastViewportTop = dims.viewportTop;\n          return affixType;\n        }\n      }, {\n        key: '_getAffixTypeScrollingDown',\n        value: function _getAffixTypeScrollingDown() {\n          var dims = this.dimensions;\n          var sidebarBottom = dims.sidebarHeight + dims.containerTop;\n          var colliderTop = dims.viewportTop + dims.topSpacing;\n          var colliderBottom = dims.viewportBottom - dims.bottomSpacing;\n          var affixType = this.affixedType;\n\n          if (this.isSidebarFitsViewport()) {\n            if (dims.sidebarHeight + colliderTop >= dims.containerBottom) {\n              dims.translateY = dims.containerBottom - sidebarBottom;\n              affixType = 'CONTAINER-BOTTOM';\n            } else if (colliderTop >= dims.containerTop) {\n              dims.translateY = colliderTop - dims.containerTop;\n              affixType = 'VIEWPORT-TOP';\n            }\n          } else {\n            if (dims.containerBottom <= colliderBottom) {\n              dims.translateY = dims.containerBottom - sidebarBottom;\n              affixType = 'CONTAINER-BOTTOM';\n            } else if (sidebarBottom + dims.translateY <= colliderBottom) {\n              dims.translateY = colliderBottom - sidebarBottom;\n              affixType = 'VIEWPORT-BOTTOM';\n            } else if (dims.containerTop + dims.translateY <= colliderTop && 0 !== dims.translateY && dims.maxTranslateY !== dims.translateY) {\n              affixType = 'VIEWPORT-UNBOTTOM';\n            }\n          }\n\n          return affixType;\n        }\n      }, {\n        key: '_getAffixTypeScrollingUp',\n        value: function _getAffixTypeScrollingUp() {\n          var dims = this.dimensions;\n          var sidebarBottom = dims.sidebarHeight + dims.containerTop;\n          var colliderTop = dims.viewportTop + dims.topSpacing;\n          var colliderBottom = dims.viewportBottom - dims.bottomSpacing;\n          var affixType = this.affixedType;\n\n          if (colliderTop <= dims.translateY + dims.containerTop) {\n            dims.translateY = colliderTop - dims.containerTop;\n            affixType = 'VIEWPORT-TOP';\n          } else if (dims.containerBottom <= colliderBottom) {\n            dims.translateY = dims.containerBottom - sidebarBottom;\n            affixType = 'CONTAINER-BOTTOM';\n          } else if (!this.isSidebarFitsViewport()) {\n\n            if (dims.containerTop <= colliderTop && 0 !== dims.translateY && dims.maxTranslateY !== dims.translateY) {\n              affixType = 'VIEWPORT-UNBOTTOM';\n            }\n          }\n\n          return affixType;\n        }\n      }, {\n        key: '_getStyle',\n        value: function _getStyle(affixType) {\n          if ('undefined' === typeof affixType) return;\n\n          var style = { inner: {}, outer: {} };\n          var dims = this.dimensions;\n\n          switch (affixType) {\n            case 'VIEWPORT-TOP':\n              style.inner = { position: 'fixed', top: dims.topSpacing,\n                left: dims.sidebarLeft - dims.viewportLeft, width: dims.sidebarWidth };\n              break;\n            case 'VIEWPORT-BOTTOM':\n              style.inner = { position: 'fixed', top: 'auto', left: dims.sidebarLeft,\n                bottom: dims.bottomSpacing, width: dims.sidebarWidth };\n              break;\n            case 'CONTAINER-BOTTOM':\n            case 'VIEWPORT-UNBOTTOM':\n              var translate = this._getTranslate(0, dims.translateY + 'px');\n\n              if (translate) style.inner = { transform: translate };else style.inner = { position: 'absolute', top: dims.translateY, width: dims.sidebarWidth };\n              break;\n          }\n\n          switch (affixType) {\n            case 'VIEWPORT-TOP':\n            case 'VIEWPORT-BOTTOM':\n            case 'VIEWPORT-UNBOTTOM':\n            case 'CONTAINER-BOTTOM':\n              style.outer = { height: dims.sidebarHeight, position: 'relative' };\n              break;\n          }\n\n          style.outer = StickySidebar.extend({ height: '', position: '' }, style.outer);\n          style.inner = StickySidebar.extend({ position: 'relative', top: '', left: '',\n            bottom: '', width: '', transform: '' }, style.inner);\n\n          return style;\n        }\n      }, {\n        key: 'stickyPosition',\n        value: function stickyPosition(force) {\n          if (this._breakpoint) return;\n\n          force = this._reStyle || force || false;\n\n          var offsetTop = this.options.topSpacing;\n          var offsetBottom = this.options.bottomSpacing;\n\n          var affixType = this.getAffixType();\n          var style = this._getStyle(affixType);\n\n          if ((this.affixedType != affixType || force) && affixType) {\n            var affixEvent = 'affix.' + affixType.toLowerCase().replace('viewport-', '') + EVENT_KEY;\n            StickySidebar.eventTrigger(this.sidebar, affixEvent);\n\n            if ('STATIC' === affixType) StickySidebar.removeClass(this.sidebar, this.options.stickyClass);else StickySidebar.addClass(this.sidebar, this.options.stickyClass);\n\n            for (var key in style.outer) {\n              var unit = 'number' === typeof style.outer[key] ? 'px' : '';\n              this.sidebar.style[key] = style.outer[key] + unit;\n            }\n\n            for (var _key in style.inner) {\n              var _unit = 'number' === typeof style.inner[_key] ? 'px' : '';\n              this.sidebarInner.style[_key] = style.inner[_key] + _unit;\n            }\n\n            var affixedEvent = 'affixed.' + affixType.toLowerCase().replace('viewport-', '') + EVENT_KEY;\n            StickySidebar.eventTrigger(this.sidebar, affixedEvent);\n          } else {\n            if (this._initialized) this.sidebarInner.style.left = style.inner.left;\n          }\n\n          this.affixedType = affixType;\n        }\n      }, {\n        key: '_widthBreakpoint',\n        value: function _widthBreakpoint() {\n\n          if (window.innerWidth <= this.options.minWidth) {\n            this._breakpoint = true;\n            this.affixedType = 'STATIC';\n\n            this.sidebar.removeAttribute('style');\n            StickySidebar.removeClass(this.sidebar, this.options.stickyClass);\n            this.sidebarInner.removeAttribute('style');\n          } else {\n            this._breakpoint = false;\n          }\n        }\n      }, {\n        key: 'updateSticky',\n        value: function updateSticky() {\n          var _this4 = this;\n\n          var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n          if (this._running) return;\n          this._running = true;\n\n          (function (eventType) {\n            requestAnimationFrame(function () {\n              switch (eventType) {\n                // When browser is scrolling and re-calculate just dimensions\n                // within scroll.\n                case 'scroll':\n                  _this4._calcDimensionsWithScroll();\n                  _this4.observeScrollDir();\n                  _this4.stickyPosition();\n                  break;\n\n                // When browser is resizing or there's no event, observe width\n                // breakpoint and re-calculate dimensions.\n                case 'resize':\n                default:\n                  _this4._widthBreakpoint();\n                  _this4.calcDimensions();\n                  _this4.stickyPosition(true);\n                  break;\n              }\n              _this4._running = false;\n            });\n          })(event.type);\n        }\n      }, {\n        key: '_setSupportFeatures',\n        value: function _setSupportFeatures() {\n          var support = this.support;\n\n          support.transform = StickySidebar.supportTransform();\n          support.transform3d = StickySidebar.supportTransform(true);\n        }\n      }, {\n        key: '_getTranslate',\n        value: function _getTranslate() {\n          var y = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n          var x = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n          var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n          if (this.support.transform3d) return 'translate3d(' + y + ', ' + x + ', ' + z + ')';else if (this.support.translate) return 'translate(' + y + ', ' + x + ')';else return false;\n        }\n      }, {\n        key: 'destroy',\n        value: function destroy() {\n          window.removeEventListener('resize', this, { capture: false });\n          window.removeEventListener('scroll', this, { capture: false });\n\n          this.sidebar.classList.remove(this.options.stickyClass);\n          this.sidebar.style.minHeight = '';\n\n          this.sidebar.removeEventListener('update' + EVENT_KEY, this);\n\n          var styleReset = { inner: {}, outer: {} };\n\n          styleReset.inner = { position: '', top: '', left: '', bottom: '', width: '', transform: '' };\n          styleReset.outer = { height: '', position: '' };\n\n          for (var key in styleReset.outer) {\n            this.sidebar.style[key] = styleReset.outer[key];\n          }for (var _key2 in styleReset.inner) {\n            this.sidebarInner.style[_key2] = styleReset.inner[_key2];\n          }if (this.options.resizeSensor && 'undefined' !== typeof ResizeSensor) {\n            ResizeSensor.detach(this.sidebarInner, this.handleEvent);\n            ResizeSensor.detach(this.container, this.handleEvent);\n          }\n        }\n      }], [{\n        key: 'supportTransform',\n        value: function supportTransform(transform3d) {\n          var result = false,\n              property = transform3d ? 'perspective' : 'transform',\n              upper = property.charAt(0).toUpperCase() + property.slice(1),\n              prefixes = ['Webkit', 'Moz', 'O', 'ms'],\n              support = document.createElement('support'),\n              style = support.style;\n\n          (property + ' ' + prefixes.join(upper + ' ') + upper).split(' ').forEach(function (property, i) {\n            if (style[property] !== undefined) {\n              result = property;\n              return false;\n            }\n          });\n          return result;\n        }\n      }, {\n        key: 'eventTrigger',\n        value: function eventTrigger(element, eventName, data) {\n          try {\n            var event = new CustomEvent(eventName, { detail: data });\n          } catch (e) {\n            var event = document.createEvent('CustomEvent');\n            event.initCustomEvent(eventName, true, true, data);\n          }\n          element.dispatchEvent(event);\n        }\n      }, {\n        key: 'extend',\n        value: function extend(defaults, options) {\n          var results = {};\n          for (var key in defaults) {\n            if ('undefined' !== typeof options[key]) results[key] = options[key];else results[key] = defaults[key];\n          }\n          return results;\n        }\n      }, {\n        key: 'offsetRelative',\n        value: function offsetRelative(element) {\n          var result = { left: 0, top: 0 };\n\n          do {\n            var offsetTop = element.offsetTop;\n            var offsetLeft = element.offsetLeft;\n\n            if (!isNaN(offsetTop)) result.top += offsetTop;\n\n            if (!isNaN(offsetLeft)) result.left += offsetLeft;\n\n            element = 'BODY' === element.tagName ? element.parentElement : element.offsetParent;\n          } while (element);\n          return result;\n        }\n      }, {\n        key: 'addClass',\n        value: function addClass(element, className) {\n          if (!StickySidebar.hasClass(element, className)) {\n            if (element.classList) element.classList.add(className);else element.className += ' ' + className;\n          }\n        }\n      }, {\n        key: 'removeClass',\n        value: function removeClass(element, className) {\n          if (StickySidebar.hasClass(element, className)) {\n            if (element.classList) element.classList.remove(className);else element.className = element.className.replace(new RegExp('(^|\\\\b)' + className.split(' ').join('|') + '(\\\\b|$)', 'gi'), ' ');\n          }\n        }\n      }, {\n        key: 'hasClass',\n        value: function hasClass(element, className) {\n          if (element.classList) return element.classList.contains(className);else return new RegExp('(^| )' + className + '( |$)', 'gi').test(element.className);\n        }\n      }, {\n        key: 'defaults',\n        get: function () {\n          return DEFAULTS;\n        }\n      }]);\n\n      return StickySidebar;\n    }();\n\n    return StickySidebar;\n  }();\n\n  exports.default = StickySidebar;\n\n\n  // Global\n  // -------------------------\n  window.StickySidebar = StickySidebar;\n});"],"file":"sticky-sidebar.js"}